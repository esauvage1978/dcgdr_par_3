# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    es.directory.fixtures.json : '%kernel.project_dir%/data/importFixtures/'
    es.directory.fixtures.doc : '%kernel.project_dir%/data/doc'
    es.directory.upload.action : '%kernel.project_dir%/public/uploads/action'

    es.directory.avatar: "%kernel.project_dir%/public/avatar/"

    es.app.name: "%env(ES_APP_NAME)%"
    es.mailer.name: "%env(ES_MAILER_NAME)%"
    es.mailer.object.prefixe: "%env(ES_MAILER_OBJECT_PREFIXE)%"
    es.mailer.smtp.host: "%env(ES_MAILER_SMTP_HOST)%"
    es.mailer.smtp.port: "%env(ES_MAILER_SMTP_PORT)%"
    es.mailer.user.name: "%env(ES_MAILER_USER_NAME)%"
    es.mailer.user.mail: "%env(ES_MAILER_USER_MAIL)%"
    es.mailer.user.password: "%env(ES_MAILER_USER_PASSWORD)%"
    es.news.time: "%env(ES_NEWS_TIME)%"
    es.jalon.to.near: "%env(ES_JALON_TO_NEAR)%"
    es.directory.css: "%kernel.project_dir%/public/css"

    es.mailer.workflow.cotech: "%env(ES_MAILER_WORKFLOW_COTECH)%"
    es.mailer.workflow.codir: "%env(ES_MAILER_WORKFLOW_CODIR)%"
    es.mailer.workflow.rejected: "%env(ES_MAILER_WORKFLOW_REJECTED)%"
    es.mailer.workflow.finalised: "%env(ES_MAILER_WORKFLOW_FINALISED)%"
    es.mailer.workflow.deployed: "%env(ES_MAILER_WORKFLOW_DEPLOYED)%"
    es.mailer.workflow.measured: "%env(ES_MAILER_WORKFLOW_MEASURED)%"
    es.mailer.workflow.clotured: "%env(ES_MAILER_WORKFLOW_CLOTURED)%"
    es.mailer.workflow.abandonned: "%env(ES_MAILER_WORKFLOW_ABANDONNED)%"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Listener\UserLoginListener:
      public: true
      tags:
        - { name: 'kernel.event_listener', event: 'security.interactive_login' }

    App\Listener\IndicatorValueListener:
        tags:
            name: doctrine.orm.entity_listener
            event: prePersist
            entity: App\Entity\IndicatorValue

    App\Listener\IndicatorListener:
        tags:
            - { name: doctrine.orm.entity_listener }

    App\Listener\ActionFileUploadListener:
        arguments:
            $path: '%kernel.project_dir%/public/uploads/action'
        tags:
            - { name: doctrine.orm.entity_listener }

    App\Listener\CadrageFileUploadListener:
        arguments:
            $path: '%kernel.project_dir%/public/uploads/action'
        tags:
            - { name: doctrine.orm.entity_listener }

    App\Listener\DeployementFileUploadListener:
        arguments:
            $path: '%kernel.project_dir%/public/uploads/action'
        tags:
            - { name: doctrine.orm.entity_listener }